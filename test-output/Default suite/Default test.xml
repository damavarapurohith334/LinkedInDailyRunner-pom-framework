<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="0" hostname="ROHITH" failures="0" tests="1" name="Default test" time="0.334" errors="0" timestamp="2025-07-12T01:45:55 IST">
  <testcase classname="base.BaseTest" name="@BeforeTest loadFiles" time="0.23">
    <failure type="java.nio.file.InvalidPathException" message="Illegal char &amp;lt;&amp;gt; at index 74: C:\Users\damav\eclipse-workspace\testing\LinkedInDailyRunner-pom-frameworkeports\2025-07-12 01-45-55.html">
      <![CDATA[java.nio.file.InvalidPathException: Illegal char <> at index 74: C:\Users\damav\eclipse-workspace\testing\LinkedInDailyRunner-pom-frameworkeports\2025-07-12 01-45-55.html
at java.base/sun.nio.fs.WindowsPathParser.normalize(WindowsPathParser.java:182)
at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:153)
at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:77)
at java.base/sun.nio.fs.WindowsPath.parse(WindowsPath.java:92)
at java.base/sun.nio.fs.WindowsFileSystem.getPath(WindowsFileSystem.java:232)
at java.base/java.io.File.toPath(File.java:2387)
at com.aventstack.extentreports.reporter.AbstractFileReporter.<init>(AbstractFileReporter.java:40)
at com.aventstack.extentreports.reporter.ExtentSparkReporter.<init>(ExtentSparkReporter.java:55)
at utils.ExtentReportManager.getReportInstance(ExtentReportManager.java:22)
at base.BaseTest.loadFiles(BaseTest.java:35)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:71)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:400)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:333)
at org.testng.TestRunner.invokeTestConfigurations(TestRunner.java:657)
at org.testng.TestRunner.beforeRun(TestRunner.java:646)
at org.testng.TestRunner.run(TestRunner.java:612)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
    </failure>
  </testcase> <!-- @BeforeTest loadFiles -->
  <testcase classname="base.BaseTest" name="@BeforeMethod setup" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod setup -->
  <testcase classname="base.BaseTest" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="tests.UpdateProfileTest" name="updateHeadlineAndSearch" time="0.0">
    <skipped/>
  </testcase> <!-- updateHeadlineAndSearch -->
</testsuite> <!-- Default test -->
